---
name: Build

on:
  push:
    branches:
      - master
    tags:
      - '*'
  pull_request:
    branches:
      - master

jobs:
  build:
    name: Module Build
    runs-on: ubuntu-latest
    steps:
      - name: Get Debug Status
        id: debugStatus
        run: |
          echo '::set-output name=runnerDebug::${{secrets.ACTIONS_RUNNER_DEBUG}}'
          echo '::set-output name=stepDebug::${{secrets.ACTIONS_STEP_DEBUG}}'

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Build Module
        id: build
        shell: pwsh
        run: |
          .\build.ps1 build

      # - name: Capture Powershell Module
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: PSModule
      #     path: ${{ steps.SetEnvVariables.outputs.prjModulePath }}

  test:
    name: Pester Tests on - ${{ matrix.config.os }}
    needs: build
    runs-on: ${{ matrix.config.os }}
    strategy:
      fail-fast: false
      matrix:
        config:
          - { os: ubuntu-latest }
          - { os: windows-latest }

    steps:
      - name: Get Debug Status
        id: debugStatus
        run: |
          echo '::set-output name=runnerDebug::${{secrets.ACTIONS_RUNNER_DEBUG}}'
          echo '::set-output name=stepDebug::${{secrets.ACTIONS_STEP_DEBUG}}'

      - name: Checkout Repository
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      # - name: Restore Built Powershell Module
      #   uses: actions/download-artifact@v2
      #   with:
      #     name: PSModule
      #     path: BuildOutput/${{ github.event.repository.name }}

      - name: Test Powershell 7+
        id: pwsh7testing
        shell: pwsh
        run: |
          if ('${{secrets.ACTIONS_STEP_DEBUG}}') {$verbosePreference = 'continue'}
          .\build.ps1

      # - name: Capture PowerShell 7 Pester Results
      #   uses: actions/upload-artifact@v2
      #   with:
      #     name: ${{ steps.pwsh7testing.outputs.pesterfile }}
      #     path: ${{ steps.pwsh7testing.outputs.pesterResults }}

      - if: runner.os == 'Windows'
        name: Test Windows Powershell 5.1
        id: pwsh5testing
        shell: powershell
        run: |
          if ('${{secrets.ACTIONS_STEP_DEBUG}}') {$verbosePreference = 'continue'}
          .\build.ps1

    #   - if: runner.os == 'Windows'
    #     name: Capture PowerShell 5 Pester Results
    #     uses: actions/upload-artifact@v2
    #     with:
    #       name: ${{ steps.pwsh5testing.outputs.pesterfile }}
    #       path: ${{ steps.pwsh5testing.outputs.pesterResults }}
    # if: ${{ always() }}

  changeLog:
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    steps:
      - name: Build Changelog
        id: github_release
        uses: mikepenz/release-changelog-builder-action@v2.9.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: ${{steps.github_release.outputs.changelog}}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deployPrereleases:
    name: Deploy PreRelease Module
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-20.04
    environment: PreRelease
    needs:
      - build
      - Test
      - changeLog
    steps:
      - name: Restore Built Powershell Module
        uses: actions/download-artifact@v2
        with:
          name: PSModule
          path: BuildOutput/${{ github.event.repository.name }}

      #- name: Publish Module to PowerShell Gallery
      #  shell: pwsh
      #  run: |
      #    if (-not '${{ secrets.PS_GALLERY_KEY }}') {throw 'You need to configure a PS_GALLERY_KEY secret for this environment with your Powershell Gallery API Key'}
      #    Publish-Module -Verbose -Name $PWD/BuildOutput/${{ github.event.repository.name }} -NugetApiKey ${{ secrets.PS_GALLERY_KEY }}

  deploy:
    name: Deploy Module
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-20.04
    environment: Release
    needs:
      - build
      - test
      - changeLog
    steps:
      - name: Restore Built Powershell Module
        uses: actions/download-artifact@v2
        with:
          name: PSModule
          path: BuildOutput/${{ github.event.repository.name }}

      #- name: Publish Module to PowerShell Gallery
      #  shell: pwsh
      #  run: |
      #    if (-not '${{ secrets.PS_GALLERY_KEY }}') {throw 'You need to configure a PS_GALLERY_KEY secret for this environment with your Powershell Gallery API Key'}
      #    Publish-Module -Verbose -Name $PWD/BuildOutput/${{ github.event.repository.name }} -NugetApiKey ${{ secrets.PS_GALLERY_KEY }}
